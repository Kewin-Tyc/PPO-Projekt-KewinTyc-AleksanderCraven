from abc import ABC, abstractmethod

class Player:
    def __init__(self, name):
        self.name = name
        self.score = 0

    def play(self):
        pass

class FootballPlayer(Player):
    def play(self):
        print(f"{self.name} strzela gola!")
        self.score += 1

class Tournament(ABC):
    def __init__(self, players):
        self.players = players

    @abstractmethod
    def start_tournament(self):
        pass

class FootballTournament(Tournament):
    def start_tournament(self):
        print("Rozpoczyna się turniej piłkarski!")
        for player in self.players:
            player.play()
            print(f"Wynik gracza {player.name}: {player.score}")


handle_exception = lambda message: print(f"Wystąpił wyjątek: {message}")


class Main:
    def run(self):
        try:
            players = [FootballPlayer(f"Gracz {i+1}") for i in range(10)]

            tournament = FootballTournament(players)
            tournament.start_tournament()


            for player in players:
                print(f"Informacje o graczu {player.name}: {vars(player)}")

        except Exception as e:
            handle_exception(e)


if name == "main":
    main = Main()
    main.run()
